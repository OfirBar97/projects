function bifurcationMap = detectBifurcations(thinnedImage)
% Detects bifurcation points based on 13 known 3x3 patterns
% Input:
%   thinnedImage - binary skeletonized (thinned) image
% Output:
%   bifurcationMap - binary image with 1s at bifurcation points

% Ensure binary image
thinnedImage = thinnedImage > 0;

% Initialize output
bifurcationMap = false(size(thinnedImage));

% Define all 13 bifurcation masks
masks = {
    [1 0 0; 0 1 1; 1 0 0], ...
    [1 0 1; 0 1 0; 0 1 0], ...
    [0 0 1; 1 1 0; 0 0 1], ...
    [0 1 0; 0 1 0; 1 0 1], ...
    [1 0 0; 0 1 1; 0 1 0], ...
    [0 0 1; 1 1 0; 0 1 0], ...
    [0 1 0; 1 1 0; 0 0 1], ...
    [0 1 0; 0 1 1; 1 0 0], ...
    [0 0 1; 0 1 0; 1 0 1], ...
    [1 0 0; 0 1 0; 1 0 1], ...
    [1 0 1; 0 1 0; 1 0 0], ...
    [1 0 1; 0 1 0; 0 0 1], ...
    [0 0 1; 0 1 0; 1 0 1], ...
    [0 1 0; 0 1 0; 1 1 1], ...
    [1 1 1; 0 0 0; 1 0 1], ...
    [1 0 1; 0 0 1; 1 0 1] ...
};

% Slide over the image
for i = 2:size(thinnedImage, 1) - 1
    for j = 2:size(thinnedImage, 2) - 1
        window = thinnedImage(i-1:i+1, j-1:j+1);
        for k = 1:length(masks)
            if isequal(window, masks{k})
                bifurcationMap(i, j) = 1;
                break;
            end
        end
    end
end
end
